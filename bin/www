#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('spotify-info:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3003');
app.set('port', port);
app.disable('x-powered-by');
app.set('trust proxy', 'loopback');

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//Keep track of sockets
var sockets = [];
var nextSocketID = 0;
server.on('connection', function (socket) {
  sockets.push(socket);
  let socketID = nextSocketID++;
  //Handle natural socket close
  socket.on('close', function () {
    delete sockets[socketID];
  });
});

function closeAllSockets() {
  let closed = 0;
  sockets.forEach(socket => {
    closed++;
    socket.end();
  });
  if (closed > 0) {
    console.log("Closed %d/%d sockets", closed, nextSocketID);
  }
  //Give sockets 5s to close gracefully
  setTimeout(destroyAllSockets, 5000);
}

function destroyAllSockets() {
  let killed = 0;
  sockets.forEach(socket => {
    killed++;
    socket.destroy();
  });
  if (killed > 0) {
    console.log("Killed %d/%d sockets", killed, nextSocketID);
  }
}

function gracefulShutdown() {
  console.log("Shutting Down");
  server.close(() => {
    console.log("Server Closed");
    app.shutdown(() => {
      console.log("Done!");
      process.exit(0);
    });
  });
  closeAllSockets();
}

process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('SIGUSR2', gracefulShutdown);